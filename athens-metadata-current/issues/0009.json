{
  "url":"https://api.github.com/repos/athensresearch/athens/issues/9",
  "repository_url":"https://api.github.com/repos/athensresearch/athens",
  "labels_url":"https://api.github.com/repos/athensresearch/athens/issues/9/labels{/name}",
  "comments_url":"https://api.github.com/repos/athensresearch/athens/issues/9/comments",
  "events_url":"https://api.github.com/repos/athensresearch/athens/issues/9/events",
  "html_url":"https://github.com/athensresearch/athens/issues/9",
  "id":610096459,
  "node_id":"MDU6SXNzdWU2MTAwOTY0NTk=",
  "number":9,
  "title":"Backend architecture: Datomic, datahike, OpenCrux, OrbitDB...",
  "user":{
    "login":"tangjeff0",
    "id":8952138,
    "node_id":"MDQ6VXNlcjg5NTIxMzg=",
    "avatar_url":"https://avatars1.githubusercontent.com/u/8952138?v=4",
    "gravatar_id":"",
    "url":"https://api.github.com/users/tangjeff0",
    "html_url":"https://github.com/tangjeff0",
    "followers_url":"https://api.github.com/users/tangjeff0/followers",
    "following_url":"https://api.github.com/users/tangjeff0/following{/other_user}",
    "gists_url":"https://api.github.com/users/tangjeff0/gists{/gist_id}",
    "starred_url":"https://api.github.com/users/tangjeff0/starred{/owner}{/repo}",
    "subscriptions_url":"https://api.github.com/users/tangjeff0/subscriptions",
    "organizations_url":"https://api.github.com/users/tangjeff0/orgs",
    "repos_url":"https://api.github.com/users/tangjeff0/repos",
    "events_url":"https://api.github.com/users/tangjeff0/events{/privacy}",
    "received_events_url":"https://api.github.com/users/tangjeff0/received_events",
    "type":"User",
    "site_admin":false
  },
  "labels":[
    {
      "id":2092524669,
      "node_id":"MDU6TGFiZWwyMDkyNTI0NjY5",
      "url":"https://api.github.com/repos/athensresearch/athens/labels/type:%20%F0%9F%99%83%20later",
      "name":"type: ðŸ™ƒ later",
      "color":"1d76db",
      "default":false,
      "description":""
    }
  ],
  "state":"open",
  "locked":false,
  "assignee":null,
  "assignees":[],
  "milestone":null,
  "created_at":"2020-04-30 14:51:10 UTC",
  "updated_at":"2020-07-09 13:37:01 UTC",
  "closed_at":null,
  "author_association":"MEMBER",
  "active_lock_reason":null,
  "body":"|                  | [Datomic](https://docs.datomic.com/)                                                        | [datahike](https://github.com/replikativ/datahike/) | [OpenCrux](https://opencrux.com/docs)                                    |\r\n|------------------|---------------------------------------------------------------------------------------------|-----------------------------------------------------|--------------------------------------------------------------------------|\r\n| scalability       | 100B datoms                                                                                 | M of entities                                       | dependent on document size                                                                        |\r\n| time             | uni-temporal                                                                                | uni-temporal                                        | bi-temporal                                                              |\r\n| license          | closed-source                                                                               | EPL 1.0                                             | MIT                                                                      |\r\n| storage services | DynamoDB, Cassandra, [JDBC SQLs](https://www.oracle.com/technetwork/java/index-136695.html) | LevelDB, Redis, PostgreSQL                          | RocksDB, LMDB, Kafka, [JDBC SQLs](https://opencrux.com/docs#config-jdbc) |\r\n\r\n",
  "performed_via_github_app":null,
  "comments":[
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/622500505",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-622500505",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":622500505,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyMjUwMDUwNQ==",
      "user":{
        "login":"tangjeff0",
        "id":8952138,
        "node_id":"MDQ6VXNlcjg5NTIxMzg=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/8952138?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/tangjeff0",
        "html_url":"https://github.com/tangjeff0",
        "followers_url":"https://api.github.com/users/tangjeff0/followers",
        "following_url":"https://api.github.com/users/tangjeff0/following{/other_user}",
        "gists_url":"https://api.github.com/users/tangjeff0/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/tangjeff0/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/tangjeff0/subscriptions",
        "organizations_url":"https://api.github.com/users/tangjeff0/orgs",
        "repos_url":"https://api.github.com/users/tangjeff0/repos",
        "events_url":"https://api.github.com/users/tangjeff0/events{/privacy}",
        "received_events_url":"https://api.github.com/users/tangjeff0/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-01 18:14:13 UTC",
      "updated_at":"2020-05-01 18:14:13 UTC",
      "author_association":"MEMBER",
      "body":"From Jeroen in the Slack:\r\n\r\n> Maybe start with Datomic (the best known and most mature option) and postpone this decision? Unless someone has a clear vision on this. I think these three should be mostly compatible at query and data model level. If something becomes difficult with Datomic, reconsider (e.g. when implementing collaboration features)? Or when people have trouble setting up the free version, and donâ€™t want to pay for the commercial version, reconsider. If this is an upfront certainty, go for datahike or OpenCrux right away? (edited) \r\n",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/623012788",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-623012788",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":623012788,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyMzAxMjc4OA==",
      "user":{
        "login":"refset",
        "id":456658,
        "node_id":"MDQ6VXNlcjQ1NjY1OA==",
        "avatar_url":"https://avatars1.githubusercontent.com/u/456658?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/refset",
        "html_url":"https://github.com/refset",
        "followers_url":"https://api.github.com/users/refset/followers",
        "following_url":"https://api.github.com/users/refset/following{/other_user}",
        "gists_url":"https://api.github.com/users/refset/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/refset/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/refset/subscriptions",
        "organizations_url":"https://api.github.com/users/refset/orgs",
        "repos_url":"https://api.github.com/users/refset/repos",
        "events_url":"https://api.github.com/users/refset/events{/privacy}",
        "received_events_url":"https://api.github.com/users/refset/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-02 21:02:11 UTC",
      "updated_at":"2020-07-09 13:37:01 UTC",
      "author_association":"NONE",
      "body":"I can only speak for Crux on these points...\r\n\r\nPros:\r\n\r\n1. Regular, fully-featured releases w/ transparent roadmap (e.g. upcoming JSON and SQL support might help non-Clojure Athens users to build tools/integrations): https://github.com/juxt/crux/projects/1\r\n2. Low memory requirements makes it particularly suitable for self-hosting (this is mostly because the query engine is _lazy_)\r\n3. Setting up a collaborative Crux-backed environment could be as simple as having a group of users share access to a managed Kafka service, see https://juxt.pro/blog/posts/crux-confluent-cloud.html (vs. always having to maintain a bunch of centralised DB infrastructure somewhere)\r\n4. Dev team that is excited and keen to see Athens succeed\r\n5. There's a tantalising possibility that bitemporality could be invaluable capability in a collaborative context. We're already thinking about the feasibility of using Hybrid Logical Clocks in place of a simple `valid-time` timestamp (see: https://jaredforsyth.com/posts/hybrid-logical-clocks/ & CockroachDB) \r\n6. An EQL syntax is available for \"pull\" https://github.com/juxt/crux/issues/849\r\n\r\nCons:\r\n\r\n1. We're still in Beta - so there may be a few API changes, but nothing too fundamental\r\n2. Crux is schemaless, but not magic, so you still need to have some idea of what your schema looks like :)\r\n\r\nHope that helps!\r\n\r\nEdit: this might be of interest: https://findka.com/blog/migrating-to-biff/ (Firebase-like stack on top of Crux)",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/623024814",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-623024814",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":623024814,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyMzAyNDgxNA==",
      "user":{
        "login":"tangjeff0",
        "id":8952138,
        "node_id":"MDQ6VXNlcjg5NTIxMzg=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/8952138?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/tangjeff0",
        "html_url":"https://github.com/tangjeff0",
        "followers_url":"https://api.github.com/users/tangjeff0/followers",
        "following_url":"https://api.github.com/users/tangjeff0/following{/other_user}",
        "gists_url":"https://api.github.com/users/tangjeff0/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/tangjeff0/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/tangjeff0/subscriptions",
        "organizations_url":"https://api.github.com/users/tangjeff0/orgs",
        "repos_url":"https://api.github.com/users/tangjeff0/repos",
        "events_url":"https://api.github.com/users/tangjeff0/events{/privacy}",
        "received_events_url":"https://api.github.com/users/tangjeff0/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-02 22:39:09 UTC",
      "updated_at":"2020-05-02 22:39:09 UTC",
      "author_association":"MEMBER",
      "body":"From Christopher Small, author of [datsync](https://github.com/metasoarous/datsync)\r\n\r\n> My hope is that DatSync will be able to support Datahike on the backend, and I have no objections to supporting Crux if there aren't technical blockers.\r\nIs it [Athens] mainly focused on small deployments for a sort of DIY self-hosted Roam? If so, and you'd mostly be expecting data from small numbers of users, you can probably get things working with any of these tools.\r\nIf however, you are hoping to have large centralized (but OSS) hosting available, then you'd need to think about scalability, and I think your best option there would be Datomic.\r\nDatahike has pretty decent query performance, but writes have the potential to be a bottleneck, so you can look into where that pain point hits. For lots of (relatively) small deployments though, datahike would be perfect.\r\nIf I knew more about crux I might be able to say more about its advantages, but if you are looking to use DataScript on the client, Datahike is a fork, and so likely to have more impedence match.\r\n",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/623025409",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-623025409",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":623025409,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyMzAyNTQwOQ==",
      "user":{
        "login":"refset",
        "id":456658,
        "node_id":"MDQ6VXNlcjQ1NjY1OA==",
        "avatar_url":"https://avatars1.githubusercontent.com/u/456658?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/refset",
        "html_url":"https://github.com/refset",
        "followers_url":"https://api.github.com/users/refset/followers",
        "following_url":"https://api.github.com/users/refset/following{/other_user}",
        "gists_url":"https://api.github.com/users/refset/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/refset/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/refset/subscriptions",
        "organizations_url":"https://api.github.com/users/refset/orgs",
        "repos_url":"https://api.github.com/users/refset/repos",
        "events_url":"https://api.github.com/users/refset/events{/privacy}",
        "received_events_url":"https://api.github.com/users/refset/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-02 22:45:31 UTC",
      "updated_at":"2020-05-02 22:45:31 UTC",
      "author_association":"NONE",
      "body":"We've not looked at datsync in any detail but we have spent some time thinking about crux->datascript replication already: https://github.com/crux-labs/crux-datascript/blob/master/src/crux_datascript/core.clj",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/623294715",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-623294715",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":623294715,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyMzI5NDcxNQ==",
      "user":{
        "login":"whilo",
        "id":2884416,
        "node_id":"MDQ6VXNlcjI4ODQ0MTY=",
        "avatar_url":"https://avatars2.githubusercontent.com/u/2884416?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/whilo",
        "html_url":"https://github.com/whilo",
        "followers_url":"https://api.github.com/users/whilo/followers",
        "following_url":"https://api.github.com/users/whilo/following{/other_user}",
        "gists_url":"https://api.github.com/users/whilo/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/whilo/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/whilo/subscriptions",
        "organizations_url":"https://api.github.com/users/whilo/orgs",
        "repos_url":"https://api.github.com/users/whilo/repos",
        "events_url":"https://api.github.com/users/whilo/events{/privacy}",
        "received_events_url":"https://api.github.com/users/whilo/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-04 07:04:42 UTC",
      "updated_at":"2020-05-14 19:37:37 UTC",
      "author_association":"NONE",
      "body":"Just to also chime in and add a few things that have not been said yet:\r\n\r\nYes, Datahike is still very much compatible with DataScript and moreover we are aiming to port our query engine with durability back over to ClojureScript in our next release as well (after `0.3.0` which is pending), so Datahike will be able to substitute for DataScript and optionally provide client-side durability at the same time. We have implemented all our abstractions as `replikativ` libraries in a platform neutral way from the start, the main thing missing is to provide ClojureScript asynchronous IO support in Datahike's query engine code. This is a very doable task, it was just easier and more attractive to get the JVM version working well first. Replicating Datahike will be possible with P2P web technology, such as demonstrated in https://lambdaforge.io/2019/12/08/replicate-datahike-wherever-you-go.html. We are convinced that we need to find better business models than the current data silo approach.\r\n\r\nWe also provide a Datomic compatible core API that is used by our commercial clients, so if you decide to stick to the common subset, you will be able to swap Datahike in at any point. If you hit missing features or incompatibilities, please open an issue. We are currently working on our write throughput and I am confident that we can scale to Datomic size deployments in principle, it was just a matter of priorities.\r\n\r\nWe, the members of LambdaForge, are also big fans of the Zettelkasten method (even before we were aware of Roam) and use https://org-roam.readthedocs.io/en/latest/ at the moment. We would be super happy to see a reliable open source implementation like Athens to succeed, so keep going :100: ! \r\n\r\nI think ideally the backends should be exchangeable, so even if you decide for one, keep in mind when you buy into its specific semantics.",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/629061448",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-629061448",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":629061448,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyOTA2MTQ0OA==",
      "user":{
        "login":"jelmerderonde",
        "id":2357145,
        "node_id":"MDQ6VXNlcjIzNTcxNDU=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/2357145?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/jelmerderonde",
        "html_url":"https://github.com/jelmerderonde",
        "followers_url":"https://api.github.com/users/jelmerderonde/followers",
        "following_url":"https://api.github.com/users/jelmerderonde/following{/other_user}",
        "gists_url":"https://api.github.com/users/jelmerderonde/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/jelmerderonde/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/jelmerderonde/subscriptions",
        "organizations_url":"https://api.github.com/users/jelmerderonde/orgs",
        "repos_url":"https://api.github.com/users/jelmerderonde/repos",
        "events_url":"https://api.github.com/users/jelmerderonde/events{/privacy}",
        "received_events_url":"https://api.github.com/users/jelmerderonde/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-15 06:46:39 UTC",
      "updated_at":"2020-05-15 06:46:39 UTC",
      "author_association":"CONTRIBUTOR",
      "body":"Although I don't consider myself an expert in databases, I guess one of the (future) advantages of Datahike would be that it could potentially enable \"local first\" as described here: https://www.inkandswitch.com/local-first.html. For me this would be great to have in a tool like Athens because you could easily edit offline on multiple machines, while having confidence that your edits could later on combine seamlessly.",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/629222177",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-629222177",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":629222177,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyOTIyMjE3Nw==",
      "user":{
        "login":"tangjeff0",
        "id":8952138,
        "node_id":"MDQ6VXNlcjg5NTIxMzg=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/8952138?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/tangjeff0",
        "html_url":"https://github.com/tangjeff0",
        "followers_url":"https://api.github.com/users/tangjeff0/followers",
        "following_url":"https://api.github.com/users/tangjeff0/following{/other_user}",
        "gists_url":"https://api.github.com/users/tangjeff0/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/tangjeff0/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/tangjeff0/subscriptions",
        "organizations_url":"https://api.github.com/users/tangjeff0/orgs",
        "repos_url":"https://api.github.com/users/tangjeff0/repos",
        "events_url":"https://api.github.com/users/tangjeff0/events{/privacy}",
        "received_events_url":"https://api.github.com/users/tangjeff0/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-15 13:00:11 UTC",
      "updated_at":"2020-05-15 13:00:11 UTC",
      "author_association":"MEMBER",
      "body":"Thanks so much for sharing that link. Several engineers (including myself) are quite interested in local first applications. We've discussed databases like [OrbitDB, Gun, and Scuttlebutt](https://medium.com/3box/3box-research-comparing-distributed-databases-gun-orbitdb-and-scuttlebutt-2e3b5da34ef3). Datahike is very interesting for this reason.",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/629657602",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-629657602",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":629657602,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyOTY1NzYwMg==",
      "user":{
        "login":"jelmerderonde",
        "id":2357145,
        "node_id":"MDQ6VXNlcjIzNTcxNDU=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/2357145?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/jelmerderonde",
        "html_url":"https://github.com/jelmerderonde",
        "followers_url":"https://api.github.com/users/jelmerderonde/followers",
        "following_url":"https://api.github.com/users/jelmerderonde/following{/other_user}",
        "gists_url":"https://api.github.com/users/jelmerderonde/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/jelmerderonde/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/jelmerderonde/subscriptions",
        "organizations_url":"https://api.github.com/users/jelmerderonde/orgs",
        "repos_url":"https://api.github.com/users/jelmerderonde/repos",
        "events_url":"https://api.github.com/users/jelmerderonde/events{/privacy}",
        "received_events_url":"https://api.github.com/users/jelmerderonde/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-16 14:48:50 UTC",
      "updated_at":"2020-05-16 14:48:50 UTC",
      "author_association":"CONTRIBUTOR",
      "body":"@tangjeff0 no problem. I guess Datahike isn't quite there yet, but maybe @whilo can share something about whether Datahike would allow a local-first workflow in the future?",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/629707782",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-629707782",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":629707782,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYyOTcwNzc4Mg==",
      "user":{
        "login":"whilo",
        "id":2884416,
        "node_id":"MDQ6VXNlcjI4ODQ0MTY=",
        "avatar_url":"https://avatars2.githubusercontent.com/u/2884416?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/whilo",
        "html_url":"https://github.com/whilo",
        "followers_url":"https://api.github.com/users/whilo/followers",
        "following_url":"https://api.github.com/users/whilo/following{/other_user}",
        "gists_url":"https://api.github.com/users/whilo/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/whilo/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/whilo/subscriptions",
        "organizations_url":"https://api.github.com/users/whilo/orgs",
        "repos_url":"https://api.github.com/users/whilo/repos",
        "events_url":"https://api.github.com/users/whilo/events{/privacy}",
        "received_events_url":"https://api.github.com/users/whilo/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-16 21:26:21 UTC",
      "updated_at":"2020-05-16 21:26:21 UTC",
      "author_association":"NONE",
      "body":"Yes, since our early work on http://replikativ.io/, which was predating most of these other local first approaches, but did not attract a large community back then and also did not have a nice programming model such as Datalog, we wanted to be local-first. We aim to port Datahike back to ClojureScript in our next iteration. Do you think open-collective would work to fund this work? Any help would be appreciated, as we are currently still hammering out Datomic compatibility and some scalability issues in the JVM version.",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/634969425",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-634969425",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":634969425,
      "node_id":"MDEyOklzc3VlQ29tbWVudDYzNDk2OTQyNQ==",
      "user":{
        "login":"tangjeff0",
        "id":8952138,
        "node_id":"MDQ6VXNlcjg5NTIxMzg=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/8952138?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/tangjeff0",
        "html_url":"https://github.com/tangjeff0",
        "followers_url":"https://api.github.com/users/tangjeff0/followers",
        "following_url":"https://api.github.com/users/tangjeff0/following{/other_user}",
        "gists_url":"https://api.github.com/users/tangjeff0/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/tangjeff0/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/tangjeff0/subscriptions",
        "organizations_url":"https://api.github.com/users/tangjeff0/orgs",
        "repos_url":"https://api.github.com/users/tangjeff0/repos",
        "events_url":"https://api.github.com/users/tangjeff0/events{/privacy}",
        "received_events_url":"https://api.github.com/users/tangjeff0/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-05-27 22:08:57 UTC",
      "updated_at":"2020-05-27 22:08:57 UTC",
      "author_association":"MEMBER",
      "body":"Will re-open when after v1 is complete",
      "performed_via_github_app":null
    },
    {
      "url":"https://api.github.com/repos/athensresearch/athens/issues/comments/654418648",
      "html_url":"https://github.com/athensresearch/athens/issues/9#issuecomment-654418648",
      "issue_url":"https://api.github.com/repos/athensresearch/athens/issues/9",
      "id":654418648,
      "node_id":"MDEyOklzc3VlQ29tbWVudDY1NDQxODY0OA==",
      "user":{
        "login":"pepoospina",
        "id":3278772,
        "node_id":"MDQ6VXNlcjMyNzg3NzI=",
        "avatar_url":"https://avatars1.githubusercontent.com/u/3278772?v=4",
        "gravatar_id":"",
        "url":"https://api.github.com/users/pepoospina",
        "html_url":"https://github.com/pepoospina",
        "followers_url":"https://api.github.com/users/pepoospina/followers",
        "following_url":"https://api.github.com/users/pepoospina/following{/other_user}",
        "gists_url":"https://api.github.com/users/pepoospina/gists{/gist_id}",
        "starred_url":"https://api.github.com/users/pepoospina/starred{/owner}{/repo}",
        "subscriptions_url":"https://api.github.com/users/pepoospina/subscriptions",
        "organizations_url":"https://api.github.com/users/pepoospina/orgs",
        "repos_url":"https://api.github.com/users/pepoospina/repos",
        "events_url":"https://api.github.com/users/pepoospina/events{/privacy}",
        "received_events_url":"https://api.github.com/users/pepoospina/received_events",
        "type":"User",
        "site_admin":false
      },
      "created_at":"2020-07-06 19:17:58 UTC",
      "updated_at":"2020-07-06 19:17:58 UTC",
      "author_association":"NONE",
      "body":"TL;DR;\r\n\r\nDo you plan to support block-level access control and notifications/subscriptions? If so, how do you plan to do this? Maybe the DB is a deal-breaker.\r\n\r\n----\r\n\r\nHi there. I've been discussing with @tangjeff0 a little bit on Twitter about your plans and how they could be linked with [ours](https://www.notion.so/uprtcl/Intercreativity-Linked-Thoughts-82f591c079c04d609d112c0e1eeb70cb). \r\n\r\nI also had some experience working with heavily nested and linked content with my previous project www.collectiveone.org and I have a couple of comments regarding the DB and how to handle the multi-player case:\r\n\r\n- access control at block level: Ideally you want access control at the block level. But you need some sort of \"default\" inheritance logic to be able to switch access control of a whole area at once. This is done in notion at the page level, with stuff like (permissions of this page are defined by this other workspace...). Besides inheritance, I would like to have composability: so that you can say stuff like \"those with access to A AND or OR access to B can access this\". Also, access control must be super fast as it is computed almost every time a block is read.\r\n\r\n- subscriptions and notifications: Ideally here you also need some sort of inheritance logic, so that If I have a block to which I want to be notified of changes, I get notified every time any of its _children_ blocks changes. Each user can have different notifications settings for each object, and one block can be in many places at the same time, so it's very hard to, once there is an event on one block, determine who you need to send that email/push notification. \r\n\r\nI did this in Postgres the last time I tried and relied a lot on algorithmic recursion, so I navigated the DB in many directions before determining what to do, or who to send a message to. This was too slow. I am not an expert in big data systems, so I really wonder how these problems should be actually handled. ",
      "performed_via_github_app":null
    }
  ]
}
