{
  "url":"https://api.github.com/repos/athensresearch/athens/pulls/comments/450147806",
  "pull_request_review_id":442979839,
  "id":450147806,
  "node_id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NzgwNg==",
  "diff_hunk":"@@ -1,501 +1,14 @@\n (ns athens.devcards.devtool\n   (:require\n-    [\"@material-ui/icons\" :as mui-icons]\n     [athens.db :as db :refer [dsdb]]\n-    [athens.devcards.buttons :refer [button-primary button]]\n     [athens.devcards.db :refer [load-real-db-button]]\n-    [athens.devcards.textinput :refer [textinput-style]]\n-    [athens.style :refer [color]]\n-    [cljs.pprint :as pp]\n-    [cljsjs.react]\n-    [cljsjs.react.dom]\n-    [clojure.core.protocols :as core-p]\n-    [clojure.datafy :refer [nav datafy]]\n-    [datascript.core :as d]\n+    [athens.views.buttons :refer [button-primary button]]\n+    [athens.views.devtool :refer [state* handler devtool-prompt-el devtool-component]]\n     [datascript.db]\n     [devcards.core :as devcards :refer [defcard-rg]]\n-    [garden.color :refer [darken]]\n-    [komponentit.autosize :as autosize]\n     [me.tonsky.persistent-sorted-set]\n-    [re-frame.core :refer [subscribe dispatch]]\n-    [reagent.core :as r]\n     [reagent.ratom]\n-    [sci.core :as sci]\n-    [shadow.remote.runtime.cljs.browser]\n-    [stylefy.core :as stylefy :refer [use-style]])\n-  (:import\n-    (goog.events\n-      KeyCodes)))\n-\n-\n-;;; Styles\n-\n-\n-(def container-style\n-  {:grid-area     \"devtool\"\n-   :flex-direction \"column\"\n-   :background    (color :panel-color)\n-   :position      \"relative\"\n-   :width         \"100vw\"\n-   :height        \"33vh\"\n-   :display \"flex\"\n-   :overflow-y    \"auto\"\n-   :right         0\n-   :z-index       2})\n-\n-\n-(def tabs-style\n-  {:padding \"0 8px\"\n-   :flex \"0 0 auto\"\n-   :background (darken (color :panel-color) 5)\n-   :display \"flex\"\n-   :align-items \"stretch\"\n-   :justify-content \"space-between\"\n-   ::stylefy/manual [[:button {:border-radius \"0\"}]]})\n-\n-\n-(def tabs-section-style\n-  {:display \"flex\"\n-   :align-items \"stretch\"})\n-\n-\n-(def panels-style\n-  {:overflow-y \"auto\"\n-   :padding \"8px\"})\n-\n-\n-(def current-location-style\n-  {:display \"flex\"\n-   :align-items \"center\"\n-   :flex \"1 1 100%\"\n-   :font-size \"14px\"\n-   :border-bottom [[\"1px solid\" (darken (color :panel-color) 10)]]})\n-\n-\n-(def current-location-name-style\n-  {:font-weight \"bold\"\n-   :font-size \"inherit\"\n-   :margin-block \"0\"\n-   :margin-inline-start \"1em\"\n-   :margin-inline-end \"1em\"})\n-\n-\n-(def current-location-controls-style {:margin-inline-start \"1em\"})\n-\n-\n-(def devtool-table-style\n-  {:border-collapse \"collapse\"\n-   :font-size \"12px\"\n-   :font-family \"IBM Plex Sans Condensed\"\n-   :letter-spacing \"-0.01em\"\n-   :margin \"8px 0 0\"\n-   :border-spacing \"0\"\n-   :min-width \"100%\"\n-   ::stylefy/manual [[:td {:border-top [[\"1px solid \" (darken (color :panel-color) 5)]]\n-                           :padding \"2px\"}]\n-                     [:tbody {:vertical-align \"top\"}]\n-                     [:th {:text-align \"left\" :padding \"2px 2px\" :white-space \"nowrap\"}]\n-                     [:tr {:transition \"all 0.05s ease\"}]\n-                     [:td:first-child :th:first-child {:padding-left \"8px\"}]\n-                     [:td:last-child :th-last-child {:padding-right \"8px\"}]\n-                     [:tbody [:tr:hover {:cursor \"pointer\"\n-                                         :background (darken (color :panel-color) 2.5)\n-                                         :color (color :header-text-color)}]]\n-                     [:td>ul {:padding \"0\"\n-                              :margin \"0\"\n-                              :list-style \"none\"}]\n-                     [:td [:li {:margin \"0 0 4px\"\n-                                :padding-top \"4px\";\n-                                :border-top (str \"1px solid \" (color :panel-color))}]]\n-                     [:td [:li:first-child {:border-top \"none\" :margin-top \"0\" :padding-top \"0\"}]]\n-                     [:a {:color (color :link-color)}]\n-                     [:a:hover {:text-decoration \"underline\"}]]})\n-\n-\n-(def edn-viewer-style {:font-size \"12px\"})\n-\n-\n-(def query-input-style\n-  (merge textinput-style {:width \"100%\"\n-                          :min-height \"40px\"\n-                          :font-size \"12px\"\n-                          :background (color :app-bg-color)\n-                          :font-family \"IBM Plex Mono\"}))\n-\n-\n-;;; Components\n-\n-\n-(def initial-state\n-  {:eval-str\n-   \"(d/q '[:find [(pull ?e [*]) ...]\n-       :where [?e :node/title]]\n-    @athens/db)\"\n-   :tx-reports []\n-   :active-panel :query})\n-\n-\n-(defonce state* (r/atom initial-state))\n-\n-\n-(defn ds-nav-impl\n-  [_ k v]\n-  (condp = k\n-    :db/id (d/pull @dsdb '[* :block/_children] v) ; TODO add inverse refs here\n-    v)) ; TODO add unique idents here as well\n-\n-\n-(defn restore-db!\n-  [db]\n-  (d/reset-conn! dsdb db {:time-travel true}))\n-\n-\n-(extend-protocol core-p/Datafiable\n-  cljs.core/PersistentHashMap\n-  (datafy [this]\n-    (with-meta this {`core-p/nav ds-nav-impl}))\n-  cljs.core/PersistentArrayMap\n-  (datafy [this]\n-    (with-meta this {`core-p/nav ds-nav-impl}))\n-  datascript.db/TxReport\n-  (datafy [this]\n-    (into {} this))\n-  datascript.db/Datom\n-  (datafy [this]\n-    (vec this))\n-  datascript.db/DB\n-  (datafy [this]\n-    (into {} this))\n-  me.tonsky.persistent-sorted-set/BTSet\n-  (datafy [this]\n-    (vec this)))\n-\n-\n-(defn data-table\n-  [_ _ _]\n-  (let [limit (r/atom 20)]\n-    (fn [headers rows add-nav!]\n-      [:div\n-       [:table (use-style devtool-table-style)\n-        [:thead\n-         [:tr (for [h headers]\n-                ^{:key h} [:th h])]]\n-        [:tbody\n-         (doall\n-           (for [row (take @limit rows)]\n-\n-             ^{:key row}\n-             [:tr {:on-click #(add-nav! [(first row)\n-                                         (-> row meta :row-value)])}\n-              (for [i (range (count row))]\n-                (let [cell (get row i)]\n-                  ^{:key (str row i cell)}\n-                  [:td (if (nil? cell)\n-                         \"\"\n-                         (pr-str cell))]))]))]] ; use the edn-viewer here as well?\n-       (when (< @limit (count rows))\n-         [button-primary {:on-click-fn #(swap! limit + 10)\n-                          :style {:width \"100%\"\n-                                  :justify-content \"center\"\n-                                  :margin \"4px 0\"}\n-                          :label \"Load More\"}])])))\n-\n-\n-; TODO add truncation of long strings here\n-(defn edn-viewer\n-  [data _]\n-  [:pre (use-style edn-viewer-style) [:code (with-out-str (cljs.pprint/pprint data))]])\n-\n-\n-(defn coll-viewer\n-  [coll add-nav!]\n-  [data-table [\"idx\" \"value\"]\n-   (->> coll\n-        (map-indexed (fn [idx item]\n-                       (with-meta [idx item] {:row-value item})))\n-        vec)\n-   add-nav!])\n-\n-\n-(defn map-viewer\n-  [m add-nav!]\n-  [data-table [\"key\" \"value\"]\n-   (map (fn [[k v]] (with-meta [k v] {:row-value v})) m)\n-   add-nav!])\n-\n-\n-(defn maps-viewer\n-  [ms add-nav!]\n-  (let [headers (into [\"idx\"] (->> ms (mapcat keys) distinct))\n-        rows (map-indexed (fn [idx m]\n-                            (with-meta (into [idx]\n-                                             (for [h (rest headers)] (get m h)))\n-                              {:row-value m}))\n-                          ms)]\n-    [data-table headers rows add-nav!]))\n-\n-\n-(defn tuples-viewer\n-  [colls add-nav!]\n-  (let [max-count (->> colls\n-                       (map count)\n-                       (apply max))\n-        headers (into [\"idx\"] (range max-count))\n-        rows (map-indexed (fn [idx coll]\n-                            (with-meta (into [idx]\n-                                             (for [i (range max-count)] (get coll i)))\n-                              {:row-value coll})\n-                            colls))]\n-    [data-table headers rows add-nav!]))\n-\n-\n-(defn associative-not-sequential?\n-  [x]\n-  (and (associative? x)\n-       (not (sequential? x))))\n-\n-\n-(defn sequence-of-maps?\n-  [x]\n-  (and (sequential? x)\n-       (every? map? x)))\n-\n-\n-(defn tuples?\n-  [x]\n-  (and (sequential? x)\n-       (every? sequential? x)))\n-\n-\n-(def viewers\n-  [{:athens.viewer/id :athens.browser/edn\n-    :athens.viewer/pred (constantly true)\n-    :athens.viewer/fn edn-viewer}\n-   {:athens.viewer/id :athens.browser/coll\n-    :athens.viewer/pred coll?\n-    :athens.viewer/fn coll-viewer}\n-   {:athens.viewer/id :athens.browser/map\n-    :athens.viewer/pred associative-not-sequential?\n-    :athens.viewer/fn map-viewer}\n-   {:athens.viewer/id :athens.browser/maps\n-    :athens.viewer/pred sequence-of-maps?\n-    :athens.viewer/fn maps-viewer}\n-   {:athens.viewer/id :athens.browser/tuples\n-    :athens.viewer/pred tuples?\n-    :athens.viewer/fn tuples-viewer}])\n-\n-\n-(def viewer-preference\n-  [:athens.browser/maps\n-   :athens.browser/map\n-   :athens.browser/tuples\n-   :athens.browser/coll\n-   :athens.browser/edn])\n-\n-\n-(defn applicable-viewers\n-  [data]\n-  (->> viewers\n-       (filter (fn [{:keys [athens.viewer/pred]}] (pred data)))\n-       (map :athens.viewer/id)\n-       (sort-by #(.indexOf viewer-preference %))))\n-\n-\n-(def indexed-viewers\n-  (->> viewers\n-       (map (juxt :athens.viewer/id identity))\n-       (into {})))\n-\n-\n-(defn data-browser\n-  [_]\n-  (let [state (r/atom {:navs []})]\n-    (fn [data]\n-      (let [navs (:navs @state)\n-            add-nav! #(swap! state update :navs conj %)\n-            navved-data (reduce (fn [d [k v]] (nav (datafy d) k v))\n-                                data\n-                                navs)\n-            datafied-data (datafy navved-data)\n-            applicable-vs (applicable-viewers datafied-data)\n-            viewer-name (or (:viewer @state) (first applicable-vs))\n-            viewer (get-in indexed-viewers [viewer-name :athens.viewer/fn])]\n-        [:div\n-         [:div {:style {:display \"flex\"\n-                        :flex-direction \"row\"\n-                        :flex-wrap \"no-wrap\"\n-                        :align-items \"stretch\"\n-                        :justify-content \"space-between\"}}\n-          [:div (use-style current-location-style)\n-           (doall\n-             (for [i (-> navs count range)]\n-               (let [nav (get navs i)]\n-                 ^{:key i}\n-                 [button {:label [:<> [:> mui-icons/ChevronLeft] [:span (first nav)]]\n-                          :style {:padding \"2px 4px\"}\n-                          :on-click-fn #(swap! state (fn [s]\n-                                                       (-> s\n-                                                           (update :navs subvec 0 i)\n-                                                           (dissoc :viewer))))}])))\n-           [:h3 (use-style current-location-name-style) (pr-str (type navved-data))]\n-           [:div (use-style current-location-controls-style)\n-            [:span \"View as \"]\n-            (for [v applicable-vs]\n-              (let [click-fn #(swap! state assoc :viewer v)]\n-                ^{:key v}\n-                [button {:on-click-fn click-fn\n-                         :active (= v viewer-name)\n-                         :label (name v)}]))]]]\n-         (when (d/db? navved-data)\n-           [button-primary {:on-click-fn #(restore-db! navved-data)\n-                            :label \"Restore this db\"}])\n-         [viewer datafied-data add-nav!]]))))\n-\n-\n-(defn handler\n-  []\n-  (let [n (inc (:max-eid @dsdb))\n-        n-child (inc n)]\n-    (d/transact! dsdb [{:node/title     (str \"Test Page \" n)\n-                        :block/uid      (str \"uid-\" n)\n-                        :block/children [{:block/string (str \"Test Block\" n-child) :block/uid (str \"uid-\" n-child)}]}])))\n-\n-\n-(defn eval-with-sci\n-  [{:keys [eval-str] :as state}]\n-  (let [bindings {'athens/db dsdb\n-                  'd/pull d/pull\n-                  'd/q d/q\n-                  'd/pull-many d/pull-many\n-                  'd/entity d/entity}\n-        [ok? result] (try\n-                       [true (sci/eval-string eval-str {:bindings bindings})]\n-                       (catch js/Error e [false e]))]\n-    (-> state\n-        (assoc :result result)\n-        (assoc :error (not ok?)))))\n-\n-\n-(defn eval-box!\n-  []\n-  (swap! state* eval-with-sci))\n-\n-\n-(defn update-box!\n-  [s]\n-  (swap! state* assoc :eval-str s))\n-\n-\n-(defn listener\n-  [tx-report]\n-  (swap! state* update :tx-reports conj tx-report)\n-  (when (not (:error @state*))\n-    (eval-box!)))\n-\n-\n-(d/listen! dsdb :devtool/open listener)\n-\n-\n-(defn handle-box-change!\n-  [e]\n-  (update-box! (-> e .-target .-value)))\n-\n-\n-(defn handle-shift-return!\n-  [e]\n-  (.preventDefault e)\n-  (eval-box!))\n-\n-\n-(defn insert-tab\n-  [s pos]\n-  (str (subs s 0 pos) \"  \" (subs s pos)))\n-\n-\n-(defn handle-tab-key!\n-  [e]\n-  (let [t (.-target e)\n-        v (.-value t)\n-        pos (.-selectionStart t)]\n-    (.preventDefault e)\n-    (update-box! (insert-tab v pos))\n-    (set! (.-selectionEnd t) (+ 2 pos))))\n-\n-\n-(defn handle-box-key-down!\n-  [e]\n-  (let [key (.. e -keyCode)\n-        shift? (.. e -shiftKey)]\n-    (cond\n-      (= key KeyCodes.ENTER) (when shift? (handle-shift-return! e))\n-      (= key KeyCodes.TAB) (handle-tab-key! e)\n-      :else nil)))\n-\n-\n-(defn error-component\n-  [error]\n-  [:div {:style {:color \"red\"}}\n-   (str error)])\n-\n-\n-(defn query-component\n-  [{:keys [eval-str result error]}]\n-  [:div (use-style {:height \"100%\"})\n-   [autosize/textarea (use-style query-input-style\n-                                 {:value eval-str\n-                                  :resize \"none\"\n-                                  :on-change handle-box-change!\n-                                  :on-key-down handle-box-key-down!})]\n-   (if-not error\n-     [data-browser result]\n-     [error-component result])])\n-\n-\n-(defn txes-component\n-  [{:keys [tx-reports]}]\n-  [data-browser tx-reports])\n-\n-\n-(defn devtool-prompt-el\n-  []\n-  [button-primary {:on-click-fn #(dispatch [:devtool/toggle])\n-                   :label [:<>\n-                           [:> mui-icons/Build]\n-                           [:span \"Toggle devtool\"]]\n-                   :style {:font-size \"11px\"}}])\n-\n-\n-(defn devtool-close-el\n-  []\n-  [button {:on-click-fn #(dispatch [:devtool/toggle])\n-           :label [:> mui-icons/Clear]}])\n-\n-\n-(defn devtool-el\n-  [devtool? state]\n-  (when devtool?\n-    (let [{:keys [active-panel]} @state\n-          switch-panel (fn [panel] (swap! state assoc :active-panel panel))]\n-      [:div (use-style container-style)\n-       [:nav (use-style tabs-style)\n-        [:div (use-style tabs-section-style)\n-         [button {:on-click-fn #(switch-panel :query)\n-                  :active (= active-panel :query)\n-                  :label [:<> [:> mui-icons/ShortText] [:span \"Query\"]]}]\n-         [button {:on-click-fn #(switch-panel :txes)\n-                  :active (= active-panel :txes)\n-                  :label [:<> [:> mui-icons/History] [:span \"Transactions\"]]}]]\n-        [devtool-close-el]]\n-       [:div (use-style panels-style)\n-        (case active-panel\n-          :query [query-component @state]\n-          :txes [txes-component @state])]])))\n-\n-\n-(defn devtool-component\n-  []\n-  (let [devtool? @(subscribe [:devtool/open])]\n-    [devtool-el devtool? state*]))\n+    [shadow.remote.runtime.cljs.browser]))",
  "path":"src/cljs/athens/devcards/devtool.cljs",
  "position":501,
  "original_position":501,
  "commit_id":"15953c474a4c6f144bbf6210e645775632bbc74c",
  "original_commit_id":"15060daf7abc958412264ca91f8e244317c001b6",
  "user":{
    "login":"tangjeff0",
    "id":8952138,
    "node_id":"MDQ6VXNlcjg5NTIxMzg=",
    "avatar_url":"https://avatars1.githubusercontent.com/u/8952138?v=4",
    "gravatar_id":"",
    "url":"https://api.github.com/users/tangjeff0",
    "html_url":"https://github.com/tangjeff0",
    "followers_url":"https://api.github.com/users/tangjeff0/followers",
    "following_url":"https://api.github.com/users/tangjeff0/following{/other_user}",
    "gists_url":"https://api.github.com/users/tangjeff0/gists{/gist_id}",
    "starred_url":"https://api.github.com/users/tangjeff0/starred{/owner}{/repo}",
    "subscriptions_url":"https://api.github.com/users/tangjeff0/subscriptions",
    "organizations_url":"https://api.github.com/users/tangjeff0/orgs",
    "repos_url":"https://api.github.com/users/tangjeff0/repos",
    "events_url":"https://api.github.com/users/tangjeff0/events{/privacy}",
    "received_events_url":"https://api.github.com/users/tangjeff0/received_events",
    "type":"User",
    "site_admin":false
  },
  "body":"Also, what's the distinction between devtool and data browser?",
  "created_at":"2020-07-06 11:05:43 UTC",
  "updated_at":"2020-07-06 11:26:55 UTC",
  "html_url":"https://github.com/athensresearch/athens/pull/222#discussion_r450147806",
  "pull_request_url":"https://api.github.com/repos/athensresearch/athens/pulls/222",
  "author_association":"MEMBER",
  "_links":{
    "self":{
      "href":"https://api.github.com/repos/athensresearch/athens/pulls/comments/450147806"
    },
    "html":{
      "href":"https://github.com/athensresearch/athens/pull/222#discussion_r450147806"
    },
    "pull_request":{
      "href":"https://api.github.com/repos/athensresearch/athens/pulls/222"
    }
  },
  "start_line":null,
  "original_start_line":null,
  "start_side":null,
  "line":11,
  "original_line":11,
  "side":"RIGHT",
  "in_reply_to_id":450144029
}